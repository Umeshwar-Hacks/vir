# ===== Basic Linux =====
ls                      # list files
cd <dir>                # change directory
pwd                     # show current directory
mkdir <dir>             # create directory
rmdir <dir>             # remove empty directory
rm <file/dir>           # remove file or dir
touch <file>            # create empty file
cp <src> <dest>         # copy files/folders
mv <src> <dest>         # move/rename files/folders
cat <file>              # view file content
nano <file>             # edit file in terminal
grep <pattern> <file>   # search pattern in file
find . -name <file>     # find file by name
df -h                   # disk space usage
du -sh <dir>            # directory size
chmod 755 <file>        # change file permissions
chown user:group <file> # change owner/group
mount <device> <dir>    # mount filesystem
umount <dir>            # unmount filesystem
ping <host>             # ping test
ifconfig                # show network interfaces
ip a                    # modern network interface list
netstat -tuln           # list tcp/udp sockets
ss -tuln                # modern netstat
wget <url>              # download file
curl -O <url>           # download file
ssh user@host           # remote shell login
scp user@host:file .    # copy remote file
rsync -avz src dest     # sync files/directories
ps aux                  # list running processes
top                     # monitor processes
htop                    # interactive process monitor
kill <pid>              # kill process by pid
killall <procname>      # kill process by name
uptime                  # system uptime
free -h                 # memory info
systemctl status <svc>  # check service status
journalctl -xe          # view system logs

# ===== VirtualBox VM Creation GUI =====
# Open VirtualBox GUI
# New VM, Linux type, Ubuntu64
# Set RAM 2048MB
# Create disk VDI dynamic 20GB
# Start VM, install OS
# Configure network: Bridged Adapter
# Inside VM:
ip a                    # check IP
ping <host>             # test network

# ===== Cold Migration VM =====
# In VirtualBox:
# Start VM and run test program
# Shutdown VM
# Export VM (right-click > Export to OCI)
# Copy export to new machine
# Import VM (File > Import Appliance)
# Start VM, test program run again

# ===== Citrix XenServer =====
# Download ISO
# Create bootable USB/DVD
# Boot installation media
# Follow GUI installer
# Configure network, root password
# Finish and reboot

# ===== KVM Installation & Config =====
egrep -c '(vmx|svm)' /proc/cpuinfo      # check virtualization support
egrep -c 'lm' /proc/cpuinfo             # check 64-bit CPU
uname -a                               # system info
sudo apt update
sudo apt install qemu-kvm libvirt-daemon-system libvirt-clients bridge-utils virt-manager qemu-system
sudo nano /etc/libvirt/libvirtd.conf
listen_addr = "0.0.0.0"
unix_sock_group = "libvirt"
unix_sock_ro_perms = "0777"
unix_sock_rw_perms = "0777"
unix_sock_dir = "/var/run/libvirt"
auth_unix_ro= "none"
auth_unix_rw = "none"
sudo systemctl restart libvirtd
virsh list --all                     # list virtual machines
virsh list
virsh
version
nodeinfo

#Go to virt-manager, click on Qemu-KVM, New->import existing-> configure everything
Download image from here- https://download.cirros-cloud.net/0.5.1/

# ===== KVM Image Create/Resize =====
New-> local install media->browse and select iso
https://releases.ubuntu.com/16.04/- iso download
browse and select iso->configure memory(2048) and cpu(1)
qemu-img create -f qcow2 ubuntu_vm.qcow2 10G        # create disk image
Configure storage->finish setting vm
Start  the VM and installation of OS goes
sudo qemu-img resize ubuntu_vm.qcow2 10G            # resize image
sudo growpart /dev/sda1                          # resize partition in VM
sudo resize2fs /dev/sda1                          # resize filesystem
qemu-img convert -O vdi ubuntu_vm.qcow2 ubuntu_vm.vdi -p   # convert image format
qemu-img convert -O vpc ubuntu_vm.qcow2 ubuntu_vm.vhd -p 
qemu-img convert -O raw ubuntu_vm.qcow2 ubuntu_vm.img -p 



# ===== VirtualBox File Sharing Setup =====
# Define shared folder in VM settings->Shared Folders(Auto-mount)
(for both VMs)Start VM.... Devices->Insert Guest additions CD image
sudo sh /media/$USER/VBox_GAs_<ver>/VBoxLinuxAdditions.run (if error)    # install guest additions
sudo sh /media/tce/VBox_GAs_6.1.26/VBoxLinuxAdditions.run
sudo apt install build-essential dkms perl
sudo reboot
once started
cd /media/sf_ShareFile
sudo usermod -aG vboxsf $USER                                 # add user to shared folder group
sudo usermod -aG vboxsf tce
nano file.txt

# ===== Windows Hyper-V =====
# Server Manager: add role Hyper-V
# Create virtual switch
#Powershell
New-VM -Name "tcevm" -MemoryStartupBytes 2GB -NewVHDPath "D:\tcevm.vhdx" -NewVHDSizeBytes 60GB -Path "D:\"
Connect-VMNetworkAdapter -VMName "tcevm" -SwitchName "Intel(R) Ethernet Connection (2) I219-LM - Virtual Switch"
Set-VMDvdDrive -VMName "tcevm" -Path "C:\ubuntu-18.84-desktop-amd64.iso"
Get-VM             # start VM via PowerShell
Stop-VM -Name "tcevm"              # stop VM

# ===== Linux Network Bridge Setup =====
ip a                                # list interfaces
sudo nano /etc/network/interfaces   # edit network config
######################
#Loopback Interface
auto lo
iface lo inet loopback
# Physical Interface to be used in Bridge
allow-hotplug enpos3
iface enpos3 inet manual
#Bridge Interface
auto br-cloud
iface br-cloud inet static
address 10.0.2.20
netmask 255.255.255.0
gateway 10.0.2.2
bridge_ports enp0s3

######################

sudo systemctl restart networking   # restart network
sudo brctl addbr br-cloud           # create bridge
sudo brctl addif br-cloud enp0s3    # add interface
sudo ifconfig enp0s3 0              # remove IP from NIC
sudo ifconfig br-cloud 10.0.2.20 netmask 255.255.255.0   # set bridge IP
sudo route add default gw 10.0.2.2 dev br-cloud           # set gateway
sudo ip link set br-cloud up         # activate bridge
brctl show                        # show bridge info
ip a                              # verify interfaces

# ===== Create & Mount Windows VHD =====
diskmgmt.msc                      # open disk management
# Create VHD > set size and type
# Initialize disk, format NTFS
# Copy VHD to target machine
# Attach VHD on new machine

#=========Openstack=========
# ===== MicroStack / OpenStack Setup =====
sudo apt update && sudo apt upgrade -y             # update system
sudo snap install microstack --classic --edge      # install MicroStack (--edge if --classic not available)
sudo microstack init --auto --control               # initialize as control node (single-node)

# Check OpenStack endpoints
microstack.openstack endpoint list                  # list service endpoints

microstack.openstack dashboard url
(or)
# Get Ubuntu VM IP (to access dashboard)
ip a                                                 # check IP, look for inet addr

# Get admin credentials for CLI
sudo snap get microstack config.credentials.password
(or)
sudo cat /var/snap/microstack/common/etc/microstack.rc  # view admin user, project, password

# Source credentials for CLI commands
source /var/snap/microstack/common/etc/microstack.rc

# Create SSH key pair (do on dashboard or possible CLI)
# Go to: Project > Compute > Key Pairs (web dashboard step)
# Save private key to local machine (.pem file)

# Upload Image (Ubuntu Cloud Image)
Project > Compute > Images-> Create Image (Fill Name: ubuntu-22.04 Image Source: URL or file Format: QCOW2)
(or)
wget https://cloud-images.ubuntu.com/jammy/current/jammy-server-cloudimg-amd64.img -O ubuntu-22.04.img

# Upload image to OpenStack
sudo microstack.openstack image create \
--file /var/snap/microstack/common/ubuntu-22.04.img \
--disk-format qcow2 \
--container-format bare \
--public \
"Ubuntu-22.04"

# Check uploaded images
microstack.openstack image list
(or)
Project > Compute > Images

# Launch VM instance via CLI (replace 'busa-key' with your keypair)
microstack.openstack server create \
  --flavor m1.small \
  --image "ubuntu-22.04" \
  --network external \
  --key-name busa-key \ 
  my-first-instance
#give key name(busa-key) correctly

# Access Horizon Dashboard via https://<VM-IP>
# Use username 'admin' and password from microstack.rc file







